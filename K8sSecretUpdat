#!/bin/bash

DEFAULT_NAMESPACE="fraudsight-micro"

# Function to display command-line help
display_help() {
  echo "Usage: script.sh -s secret-name -i IP-to-remove [-n namespace]"
  echo "Options:"
  echo "  -s <secret-name>    Specify the name of the secret"
  echo "  -i <IP-to-remove>   Specify the IP address to remove"
  echo "  -n <namespace>      Specify the Kubernetes namespace (optional)"
  echo "  -h                  Display this help message"
}

while getopts ":s:i:n:h" opt; do
  case ${opt} in
    s) SECRET_NAME=$OPTARG;;
    i) IP_TO_REMOVE=$OPTARG;;
    n) NAMESPACE=$OPTARG;;
    h) display_help
       exit 0;;
    \?) echo "Invalid option -$OPTARG" >&2
        exit 1;;
    :) echo "Option -$OPTARG requires an argument." >&2
       exit 1;;
  esac
done

# Validate the input parameters
if [[ -z $SECRET_NAME ]]; then
  echo "Secret name is required. Usage: script.sh -s secret-name -i IP-to-remove [-n namespace]"
  exit 1
fi

if [[ -z $IP_TO_REMOVE ]]; then
  echo "IP to remove is required. Usage: script.sh -s secret-name -i IP-to-remove [-n namespace]"
  exit 1
fi

# Set the namespace to default if not provided
NAMESPACE="${NAMESPACE:-$DEFAULT_NAMESPACE}"

# Get the current value of the secret
CURRENT_VALUE=$(kubectl get secret $SECRET_NAME -n $NAMESPACE -o jsonpath='{.data.cassandra-endpoint}' | base64 -d)

# Remove the specified IP from the value
UPDATED_VALUE=$(echo $CURRENT_VALUE | sed "s/$IP_TO_REMOVE//g" | sed 's/,,/,/g' | sed 's/,$//')

# Update the secret with the new value
kubectl patch secret $SECRET_NAME -n $NAMESPACE -p '{"data":{"cassandra-endpoint":"'$(echo -n $UPDATED_VALUE | base64)'"}}'

# Display the updated and old values
echo "Updated values:"
echo $UPDATED_VALUE
echo ""
echo "Old values:"
echo $CURRENT_VALUE

#UPDATED_VALUE=$(echo $CURRENT_VALUE | sed "s/\<$IP_TO_REMOVE\>//g" | sed 's/,,/,/g' | sed 's/^,//; s/,$//; s/,$/,/; s/,,/,/')





