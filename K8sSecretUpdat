#!/bin/bash
DEFAULT_NAMESPACE="fraudsight-micro"
SECRET_KEY="cassandra-endpoint"
BACKUP_DIR="secret_backups"

# Function to display command-line help
display_help() {
  echo "Usage: script.sh -s secret-name -i IP-to-remove [-n namespace] [-r backup-name]"
  echo "Options:"
  echo "  -s <secret-name>     Specify the name of the secret"
  echo "  -i <IP-to-remove>    Specify the IP address to remove"
  echo "  -n <namespace>       Specify the Kubernetes namespace (optional)"
  echo "  -r <backup-name>     Roll back to the specified backup (optional)"
  echo "  -h                   Display this help message"
}

# Function to create a backup of the secret
backup_secret() {
  local secret_name=$1
  local namespace=$2
  local backup_file=""

  # Check if original backup already exists
  if [[ -f "${BACKUP_DIR}/${secret_name}-original.yaml" ]]; then
    local backup_count=$(find $BACKUP_DIR -name "${secret_name}-backup-*" | wc -l)
    backup_file="${BACKUP_DIR}/${secret_name}-backup-$(($backup_count + 1)).yaml"
  else
    backup_file="${BACKUP_DIR}/${secret_name}-original.yaml"
  fi

  kubectl get secret $secret_name -n $namespace -o yaml > $backup_file
  echo "Created backup of secret: $backup_file"
}

# Function to roll back to the specified backup
rollback_secret() {
  local secret_name=$1
  local namespace=$2
  local backup_name=$3
  local backup_file=""

  if [[ $backup_name == "original" ]]; then
    backup_file="${BACKUP_DIR}/${secret_name}-original.yaml"
  elif [[ $backup_name == "last" ]]; then
    local latest_backup=$(find $BACKUP_DIR -name "${secret_name}-backup-*" | sort -r | head -n 1)
    backup_file="$latest_backup"
  else
    backup_file="${BACKUP_DIR}/${secret_name}-backup-$backup_name.yaml"
  fi

  if [[ ! -f "$backup_file" ]]; then
    echo "Backup not found: $backup_file"
    exit 1
  fi

  if kubectl apply -f $backup_file -n $namespace; then
    echo "Rollback successful. Secret value has been reverted to the backup: $backup_file"
  else
    echo "Rollback failed. Unable to revert secret value."
    exit 1
  fi
}

# Parse command-line arguments
while getopts ":s:i:n:r:h" opt; do
  case ${opt} in
    s) SECRET_NAME=$OPTARG;;
    i) IP_TO_REMOVE=$OPTARG;;
    n) NAMESPACE=$OPTARG;;
    r) ROLLBACK=true
       BACKUP_NAME=$OPTARG;;
    h) display_help
       exit 0;;
    \?) echo "Invalid option -$OPTARG" >&2
        exit 1;;
    :) echo "Option -$OPTARG requires an argument." >&2
       exit 1;;
  esac
done

# Check if rollback flag is set
if [[ $ROLLBACK == true ]]; then
  # Rollback to the specified backup
  if [[ -z $SECRET_NAME ]]; then
    echo "Secret name is required for rollback."
    exit 1
  fi
  if [[ -z $BACKUP_NAME ]]; then
    echo "Backup name is required for rollback."
    exit 1
  fi
  if [[ -z $NAMESPACE ]]; then
    NAMESPACE=$DEFAULT_NAMESPACE
  fi
  rollback_secret $SECRET_NAME $NAMESPACE $BACKUP_NAME
  exit 0
fi

# Validate the input parameters
if [[ -z $SECRET_NAME ]]; then
  echo "Secret name is required. Usage: script.sh -s secret-name -i IP-to-remove [-n namespace] [-r backup-name]"
  exit 1
fi

if [[ -z $IP_TO_REMOVE ]]; then
  echo "IP to remove is required. Usage: script.sh -s secret-name -i IP-to-remove [-n namespace] [-r backup-name]"
  exit 1
fi

# Set the namespace to default if not provided
NAMESPACE="${NAMESPACE:-$DEFAULT_NAMESPACE}"

# Create the backup directory if it doesn't exist
mkdir -p $BACKUP_DIR

# Backup the current secret value before patching
backup_secret $SECRET_NAME $NAMESPACE

# Get the current value of the secret
CURRENT_VALUE=$(kubectl get secret $SECRET_NAME -n $NAMESPACE -o jsonpath="{.data['$SECRET_KEY']}" | base64 -d)

# Remove the specified IP from the value
UPDATED_VALUE=$(echo $CURRENT_VALUE | sed "s/\<$IP_TO_REMOVE\>//g" | sed 's/,,/,/g' | sed 's/^,//; s/,$//; s/,$/,/; s/,,/,/')

# Update the secret with the new value
if kubectl patch secret $SECRET_NAME -n $NAMESPACE -p $'{"data":{"'$SECRET_KEY'":"'$(echo -n $UPDATED_VALUE | base64)'"}}'; then
  echo "Kubectl patch successful."
else
  echo "Kubectl patch failed."
  exit 1
fi

# Display the updated and old values
echo "Updated values:"
echo $
