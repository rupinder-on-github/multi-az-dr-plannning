#!/bin/bash

# Set the Kubernetes cluster secret name
SECRET_NAME="$2"

# Function to remove the node from the Kubernetes secret
remove_node_from_secret() {
  local ip=$1
  local secret_name=$2

  kubectl patch secret $secret_name -p "{\"data\":{\"cassandra-endpoints\":\"$(kubectl get secret $secret_name -o jsonpath='{.data.cassandra-endpoints}' | base64 -d | tr ',' '\n' | grep -v $ip | paste -sd ',')}}\"}"
}

# Function to add the node back to the Kubernetes secret
add_node_to_secret() {
  local ip=$1
  local secret_name=$2

  kubectl patch secret $secret_name -p "{\"data\":{\"cassandra-endpoints\":\"$(kubectl get secret $secret_name -o jsonpath='{.data.cassandra-endpoints}' | base64 -d),$ip\"}}"
}

# Function to rollback the changes made to the Kubernetes secret
rollback_changes() {
  local original_endpoints=$1
  local secret_name=$2

  kubectl patch secret $secret_name -p "{\"data\":{\"cassandra-endpoints\":\"$original_endpoints\"}}"
}

# Function to take a backup of the secret in YAML format
backup_secret() {
  local secret_name=$1
  local backup_file="secret_backup.yaml"

  kubectl get secret $secret_name -o yaml > $backup_file
  echo "Backup of the secret saved to $backup_file"
}

# Get the original endpoints from the secret
original_endpoints=$(kubectl get secret $SECRET_NAME -o jsonpath='{.data.cassandra-endpoints}' | base64 -d)

# Take a backup of the secret before making any modifications
backup_secret "$SECRET_NAME"

# Determine the action based on the third parameter
if [ "$3" == "failover" ]; then
  # Remove the specified IP address from the secret
  remove_node_from_secret "$1" "$SECRET_NAME"
  if [ $? -eq 0 ]; then
    echo "Successfully removed the IP address from the secret."
  else
    echo "Failed to remove the IP address from the secret."
    exit 1
  fi
elif [ "$3" == "failback" ]; then
  # Add the specified IP address back to the secret
  add_node_to_secret "$1" "$SECRET_NAME"
  if [ $? -eq 0 ]; then
    echo "Successfully added the IP address back to the secret."
  else
    echo "Failed to add the IP address back to the secret."
    exit 1
  fi
else
  echo "Invalid action. Please specify 'failover' or 'failback'."
  exit 1
fi

# Prompt for rollback option
if [ "$3" == "failover" ] || [ "$3" == "failback" ]; then
  read -p "Do you want to rollback the changes? [y/n]: " rollback_option

  if [ "$rollback_option" == "y" ]; then
    # Rollback the changes
    rollback_changes "$original_endpoints" "$SECRET_NAME"
    echo "Rolled back the changes to the original secret."
  fi
fi
In 
